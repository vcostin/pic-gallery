# GitHub Actions CI/CD Configuration for Optimized E2E Tests
# This workflow demonstrates best practices for running optimized Playwright tests in CI

name: E2E Tests (Optimized)

on:
  push:
    branches: [main, develop, optimize/**]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run performance regression tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Configuration validation job
  validate-config:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Validate Playwright configuration
        run: npm run test:e2e:validate

  # Fast E2E tests with optimized configuration
  e2e-fast:
    runs-on: ubuntu-latest
    needs: validate-config
    env:
      # Enable optimized mode
      PLAYWRIGHT_FAST_MODE: true
      PLAYWRIGHT_PERF_LOG: true
      CI: true
      # Database configuration for CI
      DATABASE_URL: "file:./test.db"
      E2E_TEST_USER_EMAIL: "e2e-test@example.com"
      E2E_TEST_USER_PASSWORD: "TestPassword123!"
      E2E_TEST_USER_NAME: "E2E Test User"
      NEXTAUTH_SECRET: "test-secret-for-ci-e2e-fast"
      NEXTAUTH_URL: "http://localhost:3000"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup SQLite database for E2E tests
        run: ./scripts/setup-database-ci.sh
      
      - name: Build Next.js application
        run: npm run build
      
      - name: Start Next.js server
        run: npm start &
        
      - name: Wait for server to be ready
        run: |
          echo "Waiting for Next.js server to start..."
          for i in {1..30}; do
            if curl -s -f http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Server is ready, testing auth endpoints..."
              # Test that auth endpoints are working
              if curl -s -f http://localhost:3000/auth/login > /dev/null 2>&1; then
                echo "✅ Auth login page is accessible"
                break
              else
                echo "⚠️  Server responding but auth pages not ready yet..."
              fi
            fi
            echo "Attempt $i/30: Server not ready yet, waiting 3 seconds..."
            sleep 3
            if [ $i -eq 30 ]; then
              echo "❌ Server failed to start within 90 seconds"
              exit 1
            fi
          done
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      
      - name: Run optimized E2E tests
        run: npm run test:e2e:fast
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-fast
          path: playwright-report/
          retention-days: 7
      
      - name: Upload performance logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-logs-fast
          path: performance-results/
          retention-days: 30

  # Standard E2E tests for comparison
  e2e-standard:
    runs-on: ubuntu-latest
    needs: validate-config
    env:
      CI: true
      # Database configuration for CI
      DATABASE_URL: "file:./test.db"
      E2E_TEST_USER_EMAIL: "e2e-test@example.com"
      E2E_TEST_USER_PASSWORD: "TestPassword123!"
      E2E_TEST_USER_NAME: "E2E Test User"
      NEXTAUTH_SECRET: "test-secret-for-ci-e2e-standard"
      NEXTAUTH_URL: "http://localhost:3000"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup SQLite database for E2E tests
        run: ./scripts/setup-database-ci.sh
      
      - name: Build Next.js application
        run: npm run build
      
      - name: Start Next.js server
        run: npm start &
        
      - name: Wait for server to be ready
        run: |
          echo "Waiting for Next.js server to start..."
          for i in {1..30}; do
            if curl -s -f http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Server is ready, testing auth endpoints..."
              # Test that auth endpoints are working
              if curl -s -f http://localhost:3000/auth/login > /dev/null 2>&1; then
                echo "✅ Auth login page is accessible"
                break
              else
                echo "⚠️  Server responding but auth pages not ready yet..."
              fi
            fi
            echo "Attempt $i/30: Server not ready yet, waiting 3 seconds..."
            sleep 3
            if [ $i -eq 30 ]; then
              echo "❌ Server failed to start within 90 seconds"
              exit 1
            fi
          done
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      
      - name: Run standard E2E tests
        run: npm run test:e2e
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-standard
          path: playwright-report/
          retention-days: 7

  # Performance regression detection
  performance-regression:
    runs-on: ubuntu-latest
    needs: [e2e-fast, e2e-standard]
    if: github.event_name == 'schedule' || github.event_name == 'push'
    env:
      PLAYWRIGHT_FAST_MODE: true
      PLAYWRIGHT_PERF_LOG: true
      CI: true
      # Database configuration for CI
      DATABASE_URL: "file:./test.db"
      E2E_TEST_USER_EMAIL: "e2e-test@example.com"
      E2E_TEST_USER_PASSWORD: "TestPassword123!"
      E2E_TEST_USER_NAME: "E2E Test User"
      NEXTAUTH_SECRET: "test-secret-for-ci-performance"
      NEXTAUTH_URL: "http://localhost:3000"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup SQLite database for E2E tests
        run: ./scripts/setup-database-ci.sh
      
      - name: Build Next.js application
        run: npm run build
      
      - name: Start Next.js server
        run: npm start &
        
      - name: Wait for server to be ready
        run: |
          echo "Waiting for Next.js server to start..."
          for i in {1..30}; do
            if curl -s -f http://localhost:3000 > /dev/null 2>&1; then
              echo "Server is ready!"
              break
            fi
            echo "Attempt $i/30: Server not ready yet, waiting 2 seconds..."
            sleep 2
            if [ $i -eq 30 ]; then
              echo "❌ Server failed to start within 60 seconds"
              exit 1
            fi
          done
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      
      - name: Install bc calculator
        run: sudo apt-get update && sudo apt-get install -y bc jq
      
      - name: Restore performance baseline
        uses: actions/cache@v4
        with:
          path: .performance-baseline
          key: performance-baseline-${{ github.repository }}
          restore-keys: |
            performance-baseline-
      
      - name: Run performance regression tests
        run: ./scripts/performance-regression.sh
        continue-on-error: true
        id: regression-test
      
      - name: Save performance baseline
        uses: actions/cache@v4
        with:
          path: .performance-baseline
          key: performance-baseline-${{ github.repository }}-${{ github.run_id }}
      
      - name: Upload performance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-regression-report
          path: performance-results/
          retention-days: 90
      
      - name: Comment PR with performance results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find latest performance results
            const resultsDir = 'performance-results';
            if (fs.existsSync(resultsDir)) {
              const files = fs.readdirSync(resultsDir)
                .filter(f => f.startsWith('result-') && f.endsWith('.json'))
                .sort()
                .reverse();
              
              if (files.length > 0) {
                const latestResult = JSON.parse(
                  fs.readFileSync(path.join(resultsDir, files[0]), 'utf8')
                );
                
                const comment = `## 🚀 Performance Test Results
                
                **Configuration**: ${latestResult.config}
                **Mode**: ${latestResult.mode}
                **Duration**: ${latestResult.duration_ms}ms
                **Tests**: ${latestResult.passed_count}/${latestResult.test_count}
                **Success Rate**: ${latestResult.success_rate}%
                
                ${latestResult.duration_ms < 80000 ? '✅ Performance target met!' : '⚠️ Performance slower than target'}
                `;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            }

  # Matrix testing across different environments (optional)
  e2e-matrix:
    runs-on: ${{ matrix.os }}
    needs: validate-config
    if: github.event_name == 'schedule'
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16, 18, 20]
        mode: [fast, standard]
        include:
          - mode: fast
            env_vars: "PLAYWRIGHT_FAST_MODE=true"
          - mode: standard
            env_vars: ""
    
    env:
      CI: true
      PLAYWRIGHT_PERF_LOG: true
      # Database configuration for CI
      DATABASE_URL: "file:./test.db"
      E2E_TEST_USER_EMAIL: "e2e-test@example.com"
      E2E_TEST_USER_PASSWORD: "TestPassword123!"
      E2E_TEST_USER_NAME: "E2E Test User"
      NEXTAUTH_SECRET: "test-secret-for-ci-matrix-${{ matrix.os }}-${{ matrix.node-version }}"
      NEXTAUTH_URL: "http://localhost:3000"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup SQLite database for E2E tests
        run: ./scripts/setup-database-ci.sh
      
      - name: Build Next.js application
        run: npm run build
      
      - name: Start Next.js server
        run: npm start &
        
      - name: Wait for server to be ready
        run: |
          echo "Waiting for Next.js server to start..."
          for i in {1..30}; do
            if curl -s -f http://localhost:3000 > /dev/null 2>&1; then
              echo "Server is ready!"
              break
            fi
            echo "Attempt $i/30: Server not ready yet, waiting 2 seconds..."
            sleep 2
            if [ $i -eq 30 ]; then
              echo "❌ Server failed to start within 60 seconds"
              exit 1
            fi
          done
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      
      - name: Run E2E tests (${{ matrix.mode }} mode)
        run: ${{ matrix.env_vars }} npm run test:e2e:${{ matrix.mode }}
        continue-on-error: true
      
      - name: Upload results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}-${{ matrix.mode }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7
