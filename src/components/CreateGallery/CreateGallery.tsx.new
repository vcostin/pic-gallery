'use client';

import { useState, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { ErrorMessage, SuccessMessage } from '@/components/StatusMessages';
import logger from '@/lib/logger';
import { Button } from '@/components/ui/Button';
import { Card, CardHeader, CardContent } from '@/components/ui/Card';

import { useEnhancedGalleryImages } from '@/lib/hooks/useEnhancedGallery';
import { SelectImagesDialog } from '@/components/SelectImagesDialog';
import { GallerySortable, ViewMode } from '@/components/GallerySortable';
import { GalleryDetailsFormWithZod, GalleryFormData } from '@/components/GalleryDetails';
import { ConfirmDialog } from '@/components/ConfirmDialog';
import { CreateGallerySchema, FullImageInGallery } from '@/lib/schemas';
import { GalleryService } from '@/lib/services/galleryService';

/**
 * CreateGalleryWithZod - A form component for creating galleries with Zod validation
 * This component replaces the legacy CreateGallery with a schema-validated version
 */
export function CreateGalleryWithZod(): React.ReactElement {
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [error, setError] = useState<Error | null>(null);
  const router = useRouter();

  // Track dialog states
  const [isImagesDialogOpen, setIsImagesDialogOpen] = useState(false);
  const [isConfirmDialogOpen, setIsConfirmDialogOpen] = useState(false);
  
  // Form setup
  const { 
    control,
    register, 
    handleSubmit, 
    formState: { errors, isSubmitting }, 
    reset,
    setValue,
    watch,
  } = useForm<GalleryFormData>({
    resolver: zodResolver(CreateGallerySchema),
    defaultValues: {
      title: '',
      description: '',
      isPublished: false,
      tags: [],
      images: [],
    },
    mode: 'onBlur',
  });
  
  const watchedImages = watch('images');
  const imageCount = watchedImages ? watchedImages.length : 0;
  
  // Get enhanced image functionality (re-ordering, etc.)
  const { 
    orderedImages, 
    updateImages, 
    removeImage
  } = useEnhancedGalleryImages(watchedImages || []);
  
  // Update the form with selected images
  const handleImagesSelected = useCallback((selectedImages: FullImageInGallery[]) => {
    const updatedImages = updateImages(selectedImages);
    setValue('images', updatedImages, { shouldDirty: true });
    setIsImagesDialogOpen(false);
  }, [updateImages, setValue]);
  
  // Handle image removal
  const handleImageRemove = useCallback((image: FullImageInGallery) => {
    const updatedImages = removeImage(image);
    setValue('images', updatedImages, { shouldDirty: true });
  }, [removeImage, setValue]);
  
  // Update form state when gallery images are reordered
  const handleImagesReordered = useCallback((newImages: FullImageInGallery[]) => {
    setValue('images', newImages, { shouldDirty: true });
  }, [setValue]);
  
  // Handle form submission
  const onSubmit = async (data: GalleryFormData) => {
    try {
      setError(null);
      
      // Use the Gallery Service to create the gallery
      const newGallery = await GalleryService.createGallery({
        title: data.title,
        description: data.description,
        isPublished: data.isPublished,
        tags: data.tags,
        images: data.images?.map((image, index) => ({
          id: image.id,
          order: index,
        })) || [],
      });
      
      // Set success message
      setSuccessMessage('Gallery created successfully!');
      
      // Reset form
      reset();
      
      // Navigate to the new gallery page
      router.push(`/galleries/${newGallery.id}`);
    } catch (err) {
      setError(err instanceof Error ? err : new Error(String(err)));
      logger.error('Error creating gallery:', err);
    }
  };
  
  // Handle cancel / reset
  const handleCancelCreate = () => {
    // If there are images or form values, confirm before resetting
    if (imageCount > 0 || watchedImages.some(img => img)) {
      setIsConfirmDialogOpen(true);
    } else {
      // Otherwise just reset immediately
      reset();
    }
  };
  
  return (
    <div className="space-y-6">
      <ConfirmDialog
        isOpen={isConfirmDialogOpen}
        setIsOpen={setIsConfirmDialogOpen}
        title="Cancel Gallery Creation?"
        confirmAction={() => {
          reset();
          setIsConfirmDialogOpen(false);
        }}
        confirmText="Yes, cancel"
        cancelText="No, continue editing"
      >
        <p>All your current changes will be lost. Do you want to continue?</p>
      </ConfirmDialog>
      
      <SelectImagesDialog 
        isOpen={isImagesDialogOpen}
        setIsOpen={setIsImagesDialogOpen}
        onSelect={handleImagesSelected}
        existingImages={watchedImages || []}
        showLimit={100}
      />
      
      <Card>
        <CardHeader>
          <h1 className="text-2xl font-semibold">Create New Gallery</h1>
        </CardHeader>
        <CardContent>
          {successMessage && <SuccessMessage message={successMessage} className="mb-4" />}
          {error && (
            <ErrorMessage 
              error={error}
              retry={() => setError(null)}
              className="mb-4"
            />
          )}
          
          <div className="space-y-6">
            <GalleryDetailsFormWithZod
              register={register}
              errors={errors}
              control={control}
              isSubmitting={isSubmitting}
              showCancelButton
              submitText="Create Gallery"
              onCancel={handleCancelCreate}
            />
            
            <div className="border-t pt-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold">Gallery Images</h2>
                <Button 
                  onClick={() => setIsImagesDialogOpen(true)}
                  variant="outline"
                  className="flex items-center gap-2"
                >
                  <span>Add Images</span>
                </Button>
              </div>
              
              {imageCount > 0 ? (
                <div>
                  <GallerySortable
                    images={orderedImages}
                    onReorder={handleImagesReordered}
                    onRemoveImage={handleImageRemove}
                    imageSize="md"
                    viewMode={ViewMode.GRID}
                    showOrderNumbers
                  />
                </div>
              ) : (
                <div className="text-center p-8 border-2 border-dashed rounded-lg">
                  <p className="text-gray-500 mb-4">No images added to this gallery yet</p>
                  <Button 
                    onClick={() => setIsImagesDialogOpen(true)}
                    variant="outline"
                  >
                    Select Images
                  </Button>
                </div>
              )}
              
              {errors.images && (
                <p className="text-red-500 mt-2" data-testid="images-error">
                  {errors.images.message?.toString()}
                </p>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
